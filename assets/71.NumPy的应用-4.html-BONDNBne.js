import{_ as s,c as a,a as e,o as t}from"./app-D-bq_jAa.js";const p="/assets/vector_1-DUWlEeiN.png",l="/assets/vector_2-CospjYSC.png",o="/assets/Parallelogramme-TqplsQPE.jpeg",i="/assets/matrix_operation-KrPR5qXe.png",c="/assets/matrix_multiply-BJTuT65h.png",d="/assets/linear_transformation-CBuA5nTy.png",r="/assets/in_out_scatter_plot-26X-XQl2.png",u="/assets/in_out_regression_result-B_VnviY5.png",m={};function b(v,n){return t(),a("div",null,n[0]||(n[0]=[e('<h2 id="numpy的应用-4" tabindex="-1"><a class="header-anchor" href="#numpy的应用-4"><span>NumPy的应用-4</span></a></h2><h3 id="向量" tabindex="-1"><a class="header-anchor" href="#向量"><span>向量</span></a></h3><p><strong>向量</strong>（<em>vector</em>）也叫<strong>矢量</strong>，是一个同时具有大小和方向，且满足平行四边形法则的几何对象。与向量相对的概念叫<strong>标量</strong>或<strong>数量</strong>，标量只有大小，绝大多数情况下没有方向。我们通常用带箭头的线段来表示向量，在平面直角坐标系中的向量如下图所示。需要注意的是，向量是表达大小和方向的量，并没有规定起点和终点，所以相同的向量可以画在任意位置，例如下图中$\\boldsymbol{w}$和$\\boldsymbol{v}$两个向量并没有什么区别。</p><p><img src="'+p+'" alt="vector_1.png"></p><p>向量有很多种代数表示法，对于二维空间的向量，下面几种写法都是可以的。 $$ \\boldsymbol{a} = \\langle a_1, a_2 \\rangle = (a_1, a_2) = \\begin{pmatrix} a_1 \\ a_2 \\end{pmatrix} = \\begin{bmatrix} a_1 \\ a_2 \\end{bmatrix} $$ 向量的大小称为向量的模，它是一个标量，对于二维空间的向量，模可以通过下面的公式计算。 $$ \\lvert \\boldsymbol{a} \\rvert = \\sqrt{a_{1}^{2} + a_{2}^{2}} $$ 注意，这里的$\\lvert \\boldsymbol{a} \\rvert$并不是绝对值，你可以将其称为向量$\\boldsymbol{a}$的二范数，这是数学中的符号重用现象。上面的写法和概念也可以推广到$n$维空间，我们通常用$\\boldsymbol{R^n}$表示$n$维空间，我们刚才说的二维空间可以记为$\\boldsymbol{R^2}$，三维空间可以记为$\\boldsymbol{R^3}$。虽然生活在三维空间的我们很难想象四维空间、五维空间是什么样子，但是这并不影响我们探讨高维空间，机器学习中，我们经常把有$n$个特征的训练样本称为一个$n$维向量。</p><h4 id="向量的加法" tabindex="-1"><a class="header-anchor" href="#向量的加法"><span>向量的加法</span></a></h4><p>相同维度的向量可以相加得到一个新的向量，运算的方法是将向量的每个分量相加，如下所示。 $$ \\boldsymbol{u} = \\begin{bmatrix} u_1 \\ u_2 \\ \\vdots \\ u_n \\end{bmatrix}, \\quad \\boldsymbol{v} = \\begin{bmatrix} v_1 \\ v_2 \\ \\vdots \\ v_n \\end{bmatrix}, \\quad \\boldsymbol{u} + \\boldsymbol{v} = \\begin{bmatrix} u_1 + v_1 \\ u_2 + v_2 \\ \\vdots \\ u_n + v_n \\end{bmatrix} $$ 向量的加法满足“平行四边形法则”，即两个向量$\\boldsymbol{u}$和$\\boldsymbol{v}$构成了平行四边形的两条邻边，相加的结果是平行四边形的对角线，如下图所示。</p><p><img src="'+l+`" alt="vector_2.png"></p><h4 id="向量的数乘" tabindex="-1"><a class="header-anchor" href="#向量的数乘"><span>向量的数乘</span></a></h4><p>一个向量$\\boldsymbol{v}$可以和一个标量$k$相乘，运算的方法是将向量中的每个分量与该标量相乘即可，如下所示。 $$ \\boldsymbol{v} = \\begin{bmatrix} v_1 \\ v_2 \\ \\vdots \\ v_n \\end{bmatrix}, \\quad k \\cdot \\boldsymbol{v} = \\begin{bmatrix} k \\cdot v_1 \\ k \\cdot v_2 \\ \\vdots \\ k \\cdot v_n \\end{bmatrix} $$ 我们可以用 NumPy 的数组来表示向量，向量的加法可以通过两个数组的加法来实现，向量的数乘可以通过数组和标量的乘法来实现，此处不再进行赘述。</p><h4 id="向量的点积" tabindex="-1"><a class="header-anchor" href="#向量的点积"><span>向量的点积</span></a></h4><p>点积（<em>dot product</em>）是两个向量之间最为重要的运算之一，运算的方法是将两个向量对应分量的乘积求和，所以点积的结果是一个标量，其几何意义是两个向量的模乘以二者夹角的余弦如下所示。 $$ \\boldsymbol{u} = \\begin{bmatrix} u_1 \\ u_2 \\ \\vdots \\ u_n \\end{bmatrix}, \\quad \\boldsymbol{v} = \\begin{bmatrix} v_1 \\ v_2 \\ \\vdots \\ v_n \\end{bmatrix} \\quad \\ \\boldsymbol{u} \\cdot \\boldsymbol{v} = \\sum_{i=1}^{n}{u_iv_i} = \\lvert \\boldsymbol{u} \\rvert \\lvert \\boldsymbol{v} \\rvert cos\\theta $$ 假如我们用3维向量来表示用户对喜剧片、言情片和动作片这三类电影的偏好，我们用1到5的数字来表示喜欢的程度，其中5表示非常喜欢，4表示比较喜欢，3表示无感，2表示比较反感，1表示特别反感。那么，下面的向量表示用户非常喜欢喜剧片，特别反感言情片，对动作片不喜欢也不反感。 $$ \\boldsymbol{u} = \\begin{pmatrix} 5 \\ 1 \\ 3 \\end{pmatrix} $$ 现在有两部电影上映了，一部属于言情喜剧片，一部属于喜剧动作片，我们把两部电影也通过3维向量的方式进行表示，如下所示。 $$ \\boldsymbol{m_1} = \\begin{pmatrix} 4 \\ 5 \\ 1 \\end{pmatrix}, \\quad \\boldsymbol{m_2} = \\begin{pmatrix} 5 \\ 1 \\ 5 \\end{pmatrix} $$ 如果现在我们需要向刚才的用户推荐一部电影，我们应该给他推荐哪一部呢？我们可以将代表用户的向量$\\boldsymbol{u}$和代表电影的向量$\\boldsymbol{m_1}$和$\\boldsymbol{m_2}$分别进行点积运算，再除以向量的模长，得到向量夹角的余弦值，余弦值越接近1，说明向量的夹角越接近0度，也就是两个向量的相似度越高。很显然，我们应该向用户推荐跟他观影喜好相似度更高的电影。 $$ cos\\theta_1 = \\frac{\\boldsymbol{u} \\cdot \\boldsymbol{m1}}{|\\boldsymbol{u}||\\boldsymbol{m1}|} \\approx \\frac{4 \\times 5 + 5 \\times 1 + 3 \\times 1}{5.92 \\times 6.48} \\approx 0.73 \\ cos\\theta_2 = \\frac{\\boldsymbol{u} \\cdot \\boldsymbol{m2}}{|\\boldsymbol{u}||\\boldsymbol{m2}|} \\approx \\frac{5 \\times 5 + 1 \\times 1 + 3 \\times 5}{5.92 \\times 7.14} \\approx 0.97 $$ 大家可能会说，向量$\\boldsymbol{m_2}$代表的电影肉眼可见跟用户是更加匹配的。的确，对于一个三维向量我们凭借直觉也能够给出正确的答案，但是对于一个$n$维向量，当$n$的值非常大时，你还有信心凭借肉眼的观察和本能的直觉给出准确的答案吗？向量的点积可以通过<code>dot</code>函数来计算，而向量的模长可以通过 NumPy 的<code>linalg</code>模块中的<code>norm</code>函数来计算，代码如下所示。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">u <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">m1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">m2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>u<span class="token punctuation">,</span> m1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0.7302967433402214</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>u<span class="token punctuation">,</span> m2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0.9704311900788593</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="向量的叉积" tabindex="-1"><a class="header-anchor" href="#向量的叉积"><span>向量的叉积</span></a></h4><p>在二维空间，两个向量的叉积是这样定义的： $$ \\boldsymbol{A} = \\begin{pmatrix} a_{1} \\ a_{2} \\end{pmatrix}, \\quad \\boldsymbol{B} = \\begin{pmatrix} b_{1} \\ b_{2} \\end{pmatrix} \\ \\boldsymbol{A} \\times \\boldsymbol{B} = \\begin{vmatrix} a_{1} \\quad a_{2} \\ b_{1} \\quad b_{2} \\end{vmatrix} = a_{1}b_{2} - a_{2}b_{1} $$ 对于三维空间，两个向量的叉积结果是一个向量，如下所示： $$ \\boldsymbol{A} = \\begin{pmatrix} a_{1} \\ a_{2} \\ a_{3} \\end{pmatrix}, \\quad \\boldsymbol{B} = \\begin{pmatrix} b_{1} \\ b_{2} \\ b_{3} \\end{pmatrix} \\ \\boldsymbol{A} \\times \\boldsymbol{B} = \\begin{vmatrix} \\boldsymbol{\\hat{i}} \\quad \\boldsymbol{\\hat{j}} \\quad \\boldsymbol{\\hat{k}} \\ a_{1} \\quad a_{2} \\quad a_{3} \\ b_{1} \\quad b_{2} \\quad b_{3} \\end{vmatrix} = \\langle \\boldsymbol{\\hat{i}}\\begin{vmatrix} a_{2} \\quad a_{3} \\ b_{2} \\quad b_{3} \\end{vmatrix}, -\\boldsymbol{\\hat{j}}\\begin{vmatrix} a_{1} \\quad a_{3} \\ b_{1} \\quad b_{3} \\end{vmatrix}, \\boldsymbol{\\hat{k}}\\begin{vmatrix} a_{1} \\quad a_{2} \\ b_{1} \\quad b_{2} \\end{vmatrix} \\rangle $$ 因为叉积的结果是向量，所以$\\boldsymbol{A} \\times \\boldsymbol{B}$和$\\boldsymbol{B} \\times \\boldsymbol{A}$的结果并不相同，事实上： $$ \\boldsymbol{A} \\times \\boldsymbol{B} = -(\\boldsymbol{B} \\times \\boldsymbol{A}) $$ NumPy 中可以通过<code>cross</code>函数来计算向量的叉积，代码如下所示。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cross<span class="token punctuation">(</span>u<span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [-14   7  21]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cross<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [ 14  -7 -21]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行列式" tabindex="-1"><a class="header-anchor" href="#行列式"><span>行列式</span></a></h3><p><strong>行列式</strong>（<em>determinant</em>）通常记作$det(\\boldsymbol{A})$或$|\\boldsymbol{A}|$，其中$\\boldsymbol{A}$是一个$n$阶方阵。行列式可以看做是有向面积或体积的概念在一般欧几里得空间的推广，或者说行列式描述的是一个线性变换对“体积”所造成的影响。行列式的概念最早出现在解线性方程组的过程中，十七世纪晚期，关孝和（日本江户时代的数学家）与莱布尼茨的著作中已经使用行列式来确定线性方程组解的个数以及形式；十八世纪开始，行列式开始作为独立的数学概念被研究；十九世纪以后，行列式理论进一步得到发展和完善。</p><p><img src="`+o+'" alt="Parallelogramme.jpeg"></p><h4 id="行列式的性质" tabindex="-1"><a class="header-anchor" href="#行列式的性质"><span>行列式的性质</span></a></h4><p>行列式是由向量引出的，所以行列式解释的其实是向量的性质。</p><p><strong>性质1</strong>：如果$det(\\boldsymbol{A})$中某行（或某列）的元素全部为0，那么$det(\\boldsymbol{A}) = 0$。</p><p><strong>性质2</strong>：如果$det(\\boldsymbol{A})$中某行（或某列）有公共因子$k$，则可以提出$k$，得到行列式$det(\\boldsymbol{A^{&#39;}})$，且$det(\\boldsymbol{A}) = k \\cdot det(\\boldsymbol{A^{&#39;}})$。 $$ det(\\boldsymbol{A})={\\begin{vmatrix}a_{11}&amp;a_{12}&amp;\\dots &amp;a_{1n}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\{\\color {blue}k}a_{i1}&amp;{\\color {blue}k}a_{i2}&amp;\\dots &amp;{\\color {blue}k}a_{in}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{n1}&amp;a_{n2}&amp;\\dots &amp;a_{nn}\\end{vmatrix}}={\\color {blue}k}{\\begin{vmatrix}a_{11}&amp;a_{12}&amp;\\dots &amp;a_{1n}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{i1}&amp;a_{i2}&amp;\\dots &amp;a_{in}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{n1}&amp;a_{n2}&amp;\\dots &amp;a_{nn}\\end{vmatrix}}={\\color {blue}k} \\cdot det(\\boldsymbol{A^{&#39;}}) $$</p><p><strong>性质3</strong>：如果$det(\\boldsymbol{A})$中某行（或某列）的每个元素是两数之和，则此行列式可拆分为两个行列式相加，如下所示。 $$ {\\begin{vmatrix}a_{11}&amp;a_{12}&amp;\\dots &amp;a_{1n}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\{\\color {blue}a_{i1}}+{\\color {OliveGreen}b_{i1}}&amp;{\\color {blue}a_{i2}}+{\\color {OliveGreen}b_{i2}}&amp;\\dots &amp;{\\color {blue}a_{in}}+{\\color {OliveGreen}b_{in}}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{n1}&amp;a_{n2}&amp;\\dots &amp;a_{nn}\\end{vmatrix}}={\\begin{vmatrix}a_{11}&amp;a_{12}&amp;\\dots &amp;a_{1n}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\{\\color {blue}a_{i1}}&amp;{\\color {blue}a_{i2}}&amp;\\dots &amp;{\\color {blue}a_{in}}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{n1}&amp;a_{n2}&amp;\\dots &amp;a_{nn}\\end{vmatrix}}+{\\begin{vmatrix}a_{11}&amp;a_{12}&amp;\\dots &amp;a_{1n}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\{\\color {OliveGreen}b_{i1}}&amp;{\\color {OliveGreen}b_{i2}}&amp;\\dots &amp;{\\color {OliveGreen}b_{in}}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{n1}&amp;a_{n2}&amp;\\dots &amp;a_{nn}\\end{vmatrix}} $$ <strong>性质4</strong>：如果$det(\\boldsymbol{A})$中两行（或两列）元素对应成比例，那么$det(\\boldsymbol{A}) = 0$。</p><p><strong>性质5</strong>：如果$det(\\boldsymbol{A})$中两行（或两列）互换得到$det(\\boldsymbol{A^{&#39;}})$，那么$det(\\boldsymbol{A}) = -det(\\boldsymbol{A^{&#39;}})$。</p><p><strong>性质6</strong>：将$det(\\boldsymbol{A})$中某行（或某列）的$k$倍加进另一行（或另一列）里，行列式的值不变，如下所示。 $$ {\\begin{vmatrix}\\vdots &amp;\\vdots &amp;\\vdots &amp;\\vdots \\a_{i1}&amp;a_{i2}&amp;\\dots &amp;a_{in}\\a_{j1}&amp;a_{j2}&amp;\\dots &amp;a_{jn}\\\\vdots &amp;\\vdots &amp;\\vdots &amp;\\vdots \\\\end{vmatrix}}={\\begin{vmatrix}\\vdots &amp;\\vdots &amp;\\vdots &amp;\\vdots \\a_{i1}&amp;a_{i2}&amp;\\dots &amp;a_{in}\\a_{j1}{\\color {blue}+ka_{i1}}&amp;a_{j2}{\\color {blue}+ka_{i2}}&amp;\\dots &amp;a_{jn}{\\color {blue}+ka_{in}}\\\\vdots &amp;\\vdots &amp;\\vdots &amp;\\vdots \\\\end{vmatrix}} $$ <strong>性质7</strong>：将行列式的行列互换，行列式的值不变，如下所示。 $$ {\\begin{vmatrix}a_{11}&amp;a_{12}&amp;\\dots &amp;a_{1n}\\a_{21}&amp;a_{22}&amp;\\dots &amp;a_{2n}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{n1}&amp;a_{n2}&amp;\\dots &amp;a_{nn}\\end{vmatrix}}={\\begin{vmatrix}a_{11}&amp;a_{21}&amp;\\dots &amp;a_{n1}\\a_{12}&amp;a_{22}&amp;\\dots &amp;a_{n2}\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\a_{1n}&amp;a_{2n}&amp;\\dots &amp;a_{nn}\\end{vmatrix}} $$ <strong>性质8</strong>：方块矩阵$\\boldsymbol{A}$和$\\boldsymbol{B}$的乘积的行列式等于其行列式的乘积，即$det(\\boldsymbol{A}\\boldsymbol{B}) = det(\\boldsymbol{A})det(\\boldsymbol{B})$。特别的，若将矩阵中的每一行都乘以常数$r$，那么行列式的值将是原来的$r^{n}$倍，即$det(r\\boldsymbol{A}) = det(r\\boldsymbol{I_{n}} \\cdot \\boldsymbol{A}) = r^{n}det(\\boldsymbol{A})$，其中$\\boldsymbol{I_{n}}$是$n$阶单位矩阵。</p><p><strong>性质9</strong>：若$\\boldsymbol{A}$是可逆矩阵，那么$det(\\boldsymbol{A}^{-1}) = (det(\\boldsymbol{A}))^{-1}$。</p><h4 id="行列式的计算" tabindex="-1"><a class="header-anchor" href="#行列式的计算"><span>行列式的计算</span></a></h4><p>$n$阶行列式的计算公式如下所示： $$ det(\\boldsymbol{A})=\\sum_{n!} \\pm {a_{1\\alpha}a_{2\\beta} \\cdots a_{n\\omega}} $$</p><p>对于二阶行列式，上面的公式相当于： $$ \\begin{vmatrix} a_{11} \\quad a_{12} \\ a_{21} \\quad a_{22} \\end{vmatrix} = a_{11}a_{22} - a_{12}a_{21} $$ 对于三阶行列式，上面的计算公式相当于： $$ \\begin{vmatrix} a_{11} \\quad a_{12} \\quad a_{13} \\ a_{21} \\quad a_{22} \\quad a_{23} \\ a_{31} \\quad a_{32} \\quad a_{33} \\end{vmatrix} = a_{11}a_{22}a_{33} + a_{12}a_{23}a_{31} + a_{13}a_{21}a_{32} - a_{11}a_{23}a_{32} - a_{12}a_{21}a_{33} - a_{13}a_{22}a_{31} $$ 高阶行列式可以用<strong>代数余子式</strong>（<em>cofactor</em>）展开成多个低阶行列式，如下所示： $$ det(\\boldsymbol{A})=a_{11}C_{11}+a_{12}C_{12}+ \\cdots +a_{1n}C_{1n} = \\sum_{i=1}^{n}{a_{1i}C_{1i}} $$ 其中，$C_{11}$是原行列式去掉$a_{11}$所在行和列之后剩余的部分构成的行列式，以此类推。</p><h3 id="矩阵" tabindex="-1"><a class="header-anchor" href="#矩阵"><span>矩阵</span></a></h3><p><strong>矩阵</strong>（<em>matrix</em>）是由一系列元素排成的矩形阵列，矩阵里的元素可以是数字、符号或数学公式。矩阵可以进行<strong>加法</strong>、<strong>减法</strong>、<strong>数乘</strong>、<strong>转置</strong>、<strong>矩阵乘法</strong>等运算，如下图所示。</p><p><img src="'+i+'" alt="matrix_operation.png"></p><p>值得一提的是矩阵乘法运算，该运算仅当第一个矩阵$\\boldsymbol{A}$的列数和另一个矩阵$\\boldsymbol{B}$的行数相等时才能定义。如果$\\boldsymbol{A}$是一个$m \\times n$的矩阵，$\\boldsymbol{B}$是一个$n \\times k$矩阵，它们的乘积是一个$m \\times k$的矩阵，其中元素的计算公式如下所示： $$ [\\mathbf{AB}]<em>{i,j} = A</em>{i,1}B_{1,j} + A_{i,2}B_{2,j} + \\cdots + A_{i,n}B_{n,j} = \\sum_{r=1}^n A_{i,r}B_{r,j} $$ <img src="'+c+'" alt="matrix_multiply.png"></p><h1 id="例如-begin-bmatrix-1-0-2-1-3-1-end-bmatrix-times-begin-bmatrix-3-1-2-1-1-0-end-bmatrix" tabindex="-1"><a class="header-anchor" href="#例如-begin-bmatrix-1-0-2-1-3-1-end-bmatrix-times-begin-bmatrix-3-1-2-1-1-0-end-bmatrix"><span>例如： $$ \\begin{bmatrix} 1 &amp; 0 &amp; 2 \\ -1 &amp; 3 &amp; 1 \\ \\end{bmatrix} \\times \\begin{bmatrix} 3 &amp; 1 \\ 2 &amp; 1 \\ 1 &amp; 0 \\end{bmatrix}</span></a></h1><h1 id="begin-bmatrix-1-times-3-0-times-2-2-times-1-1-times-1-0-times-1-2-times-0-1-times-3-3-times-2-1-times-1-1-times-1-3-times-1-1-times-0-end-bmatrix" tabindex="-1"><a class="header-anchor" href="#begin-bmatrix-1-times-3-0-times-2-2-times-1-1-times-1-0-times-1-2-times-0-1-times-3-3-times-2-1-times-1-1-times-1-3-times-1-1-times-0-end-bmatrix"><span>\\begin{bmatrix} (1 \\times 3 + 0 \\times 2 + 2 \\times 1) &amp; (1 \\times 1 + 0 \\times 1 + 2 \\times 0) \\ (-1 \\times 3 + 3 \\times 2 + 1 \\times 1) &amp; (-1 \\times 1 + 3 \\times 1 + 1 \\times 0) \\ \\end{bmatrix}</span></a></h1><p>\\begin{bmatrix} 5 &amp; 1 \\ 4 &amp; 2 \\ \\end{bmatrix} $$ 矩阵的乘法满足结合律和对矩阵加法的分配律：</p><p>结合律： $(\\boldsymbol{AB})\\boldsymbol{C} = \\boldsymbol{A}(\\boldsymbol{BC})$。</p><p>左分配律：$(\\boldsymbol{A} + \\boldsymbol{B})\\boldsymbol{C} = \\boldsymbol{AC} + \\boldsymbol{BC}$。</p><p>右分配律：$\\boldsymbol{C}(\\boldsymbol{A} + \\boldsymbol{B}) = \\boldsymbol{CA} + \\boldsymbol{CB}$。</p><p><strong>矩阵乘法不满足交换律</strong>。一般情况下，矩阵$\\boldsymbol{A}$和$\\boldsymbol{B}$的乘积$\\boldsymbol{AB}$存在，但$\\boldsymbol{BA}$不一定存在，即便$\\boldsymbol{BA}$存在，大多数时候$\\boldsymbol{AB} \\neq \\boldsymbol{BA}$。</p><p>矩阵乘法的一个基本应用是在线性方程组上。线性方程组是方程组的一种，它符合以下的形式： $$ \\begin{cases} a_{1,1}x_{1} + a_{1,2}x_{2} + \\cdots + a_{1,n}x_{n}= b_{1} \\ a_{2,1}x_{1} + a_{2,2}x_{2} + \\cdots + a_{2,n}x_{n}= b_{2} \\ \\vdots \\quad \\quad \\quad \\vdots \\ a_{m,1}x_{1} + a_{m,2}x_{2} + \\cdots + a_{m,n}x_{n}= b_{m} \\end{cases} $$ 运用矩阵的方式，可以将线性方程组写成一个向量方程： $$ \\boldsymbol{Ax} = \\boldsymbol{b} $$ 其中，$\\boldsymbol{A}$是由方程组里未知数的系数排成的$m \\times n$矩阵，$\\boldsymbol{x}$是含有$n$个元素的行向量，$\\boldsymbol{b}$是含有$m$个元素的行向量。</p><p>矩阵是线性变换（保持向量加法和标量乘法的函数）的便利表达法。矩阵乘法的本质在联系到线性变换的时候最能体现，因为矩阵乘法和线性变换的合成有以下的联系，即每个$m \\times n$的矩阵$\\boldsymbol{A}$都代表了一个从$\\boldsymbol{R}^{n}$射到$\\boldsymbol{R}^{m}$的线性变换。如果无法理解上面这些内容，推荐大家看看B站上名为<a href="https://www.bilibili.com/video/BV1ib411t7YR/" target="_blank" rel="noopener noreferrer">《线性代数的本质》</a>的视频，相信这套视频会让你对线性代数有一个更好的认知。</p><p>下图是一个来自于维基百科的例子，图中展示了一些典型的二维实平面上的线性变换对平面向量（图形）造成的效果以及它们对应的二维矩阵，其中每个线性变换将蓝色图形映射成绿色图形；平面的原点$(0, 0)$用黑点表示。</p><p><img src="'+d+`" alt="linear_transformation.png"></p><h4 id="矩阵对象" tabindex="-1"><a class="header-anchor" href="#矩阵对象"><span>矩阵对象</span></a></h4><p>NumPy 中提供了专门用于线性代数（<em>linear algebra</em>）的模块和表示矩阵的类型<code>matrix</code>，当然我们通过二维数组也可以表示一个矩阵，官方并不推荐使用<code>matrix</code>类而是建议使用二维数组，而且有可能在将来的版本中会移除<code>matrix</code>类。无论如何，利用这些已经封装好的类和函数，我们可以轻松愉快的实现很多对矩阵的操作。</p><p>我们可以通过下面的代码来创建矩阵（<code>matrix</code>）对象。</p><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">m1 = np.matrix(&#39;1 2 3; 4 5 6&#39;)</span>
<span class="line">m1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>matrix</code>构造器可以传入类数组对象也可以传入字符串来构造矩阵对象。</p></blockquote><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">matrix([[1, 2, 3],</span>
<span class="line">        [4, 5, 6]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">m2 = np.asmatrix(np.array([[1, 1], [2, 2], [3, 3]]))</span>
<span class="line">m2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>asmatrix</code>函数也可以用<code>mat</code>函数代替，这两个函数其实是同一个函数。</p></blockquote><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">matrix([[1, 1],</span>
<span class="line">        [2, 2],</span>
<span class="line">        [3, 3]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">m1 * m2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">matrix([[14, 14],</span>
<span class="line">        [32, 32]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：注意<code>matrix</code>对象和<code>ndarray</code>对象乘法运算的差别，<code>matrix</code>对象的<code>*</code>运算是矩阵乘法运算。如果两个二维数组要做矩阵乘法运算，应该使用<code>@</code>运算符或<code>matmul</code>函数，而不是<code>*</code>运算符。</p></blockquote><p>矩阵对象的属性如下表所示。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>A</code></td><td>获取矩阵对象对应的<code>ndarray</code>对象</td></tr><tr><td><code>A1</code></td><td>获取矩阵对象对应的扁平化后的<code>ndarray</code>对象</td></tr><tr><td><code>I</code></td><td>可逆矩阵的逆矩阵</td></tr><tr><td><code>T</code></td><td>矩阵的转置</td></tr><tr><td><code>H</code></td><td>矩阵的共轭转置</td></tr><tr><td><code>shape</code></td><td>矩阵的形状</td></tr><tr><td><code>size</code></td><td>矩阵元素的个数</td></tr></tbody></table><p>矩阵对象的方法跟之前讲过的<code>ndarray</code>数组对象的方法基本差不多，此处不再进行赘述。</p><h4 id="线性代数模块" tabindex="-1"><a class="header-anchor" href="#线性代数模块"><span>线性代数模块</span></a></h4><p>NumPy 的<code>linalg</code>模块中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的函数，它们跟 MATLAB 和 R 等语言所使用的是相同的行业标准线性代数库，下面的表格列出了<code>numpy</code>以及<code>linalg</code>模块中一些常用的线性代数相关函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>diag</code></td><td>以一维数组的形式返回方阵的对角线元素或将一维数组转换为方阵（非对角元素元素为0）</td></tr><tr><td><code>matmul</code></td><td>矩阵乘法运算</td></tr><tr><td><code>trace</code></td><td>计算对角线元素的和</td></tr><tr><td><code>norm</code></td><td>求矩阵或向量的范数</td></tr><tr><td><code>det</code></td><td>计算行列式的值</td></tr><tr><td><code>matrix_rank</code></td><td>计算矩阵的秩</td></tr><tr><td><code>eig</code></td><td>计算矩阵的特征值（<em>eigenvalue</em>）和特征向量（<em>eigenvector</em>）</td></tr><tr><td><code>inv</code></td><td>计算非奇异矩阵（$n$阶方阵）的逆矩阵</td></tr><tr><td><code>pinv</code></td><td>计算矩阵的摩尔-彭若斯（<em>Moore-Penrose</em>）广义逆</td></tr><tr><td><code>qr</code></td><td>QR分解（把矩阵分解成一个正交矩阵与一个上三角矩阵的积）</td></tr><tr><td><code>svd</code></td><td>计算奇异值分解（<em>singular value decomposition</em>）</td></tr><tr><td><code>solve</code></td><td>解线性方程组$\\boldsymbol{Ax}=\\boldsymbol{b}$，其中$\\boldsymbol{A}$是一个方阵</td></tr><tr><td><code>lstsq</code></td><td>计算$\\boldsymbol{Ax}=\\boldsymbol{b}$的最小二乘解</td></tr></tbody></table><p>下面我们简单尝试一下上面的函数，先试一试求逆矩阵。</p><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">m3 = np.array([[1., 2.], [3., 4.]])</span>
<span class="line">m4 = np.linalg.inv(m3)</span>
<span class="line">m4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">array([[-2. ,  1. ],</span>
<span class="line">       [ 1.5, -0.5]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">np.around(m3 @ m4)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>around</code>函数对数组元素进行四舍五入操作，默认小数点后面的位数为0。</p></blockquote><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">array([[1., 0.],</span>
<span class="line">       [0., 1.]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：矩阵和它的逆矩阵做矩阵乘法会得到单位矩阵。</p></blockquote><p>计算行列式的值。</p><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">m5 = np.array([[1, 3, 5], [2, 4, 6], [4, 7, 9]])</span>
<span class="line">np.linalg.det(m5)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>计算矩阵的秩。</p><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">np.linalg.matrix_rank(m5)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>求解线性方程组。 $$ \\begin{cases} x_1 + 2x_2 + x_3 = 8 \\ 3x_1 + 7x_2 + 2x_3 = 23 \\ 2x_1 + 2x_2 + x_3 = 9 \\end{cases} $$</p><p>对于上面的线性方程组，我们可以用矩阵的形式来表示它，如下所示。 $$ \\boldsymbol{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 1\\ 3 &amp; 7 &amp; 2\\ 2 &amp; 2 &amp; 1 \\end{bmatrix}, \\quad \\boldsymbol{x} = \\begin{bmatrix} x_1 \\ x_2\\ x_3 \\end{bmatrix}, \\quad \\boldsymbol{b} = \\begin{bmatrix} 8 \\ 23\\ 9 \\end{bmatrix} $$</p><p>$$ \\boldsymbol{Ax} = \\boldsymbol{b} $$</p><p>线性方程组有唯一解的条件：系数矩阵$\\boldsymbol{A}$的秩等于增广矩阵$\\boldsymbol{Ab}$的秩，而且跟未知数的个数相同。</p><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">A = np.array([[1, 2, 1], [3, 7, 2], [2, 2, 1]])</span>
<span class="line">b = np.array([8, 23, 9]).reshape(-1, 1)</span>
<span class="line">print(np.linalg.matrix_rank(A))</span>
<span class="line">print(np.linalg.matrix_rank(np.hstack((A, b))))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：使用数组对象的<code>reshape</code>方法调形时，如果其中一个参数为-1，那么该维度有多少个元素是通过数组元素个数（<code>size</code>属性）和其他维度的元素个数自动计算出来的。</p></blockquote><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">3</span>
<span class="line">3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">np.linalg.solve(A, b)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">array([[1.],</span>
<span class="line">       [2.],</span>
<span class="line">       [3.]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面的结果表示，线性方程组的解为：$x_1 = 1, x_2 = 2, x_3 = 3$。</p></blockquote><p>下面是另一种求解线性方程组的方法，大家可以停下来思考下为什么。 $$ \\boldsymbol{x} = \\boldsymbol{A}^{-1} \\cdot \\boldsymbol{b} $$ 代码：</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">np.linalg.inv(A) @ b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">array([[1.],</span>
<span class="line">       [2.],</span>
<span class="line">       [3.]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多项式" tabindex="-1"><a class="header-anchor" href="#多项式"><span>多项式</span></a></h3><p>除了数组，NumPy 中还封装了用于<strong>多项式</strong>（<em>polynomial</em>）运算的数据类型。多项式是变量的整数次幂与系数的乘积之和，形如： $$ f(x)=a_nx^n + a_{n-1}x^{n-1} + \\cdots + a_1x^{1} + a_0x^{0} $$ 在 NumPy 1.4版本之前，我们可以用<code>poly1d</code>类型来表示多项式，目前它仍然可用，但是官方提供了新的模块<code>numpy.polynomial</code>，它除了支持基本的幂级数多项式外，还可以支持切比雪夫多项式、拉盖尔多项式等。</p><h4 id="创建多项式对象" tabindex="-1"><a class="header-anchor" href="#创建多项式对象"><span>创建多项式对象</span></a></h4><p>创建<code>poly1d</code>对象，例如：$\\small{f(x)=3x^{2}+2x+1}$。</p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">p1 <span class="token operator">=</span> np<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">p2 <span class="token operator">=</span> np<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">   2</span>
<span class="line">3 x + 2 x + 1</span>
<span class="line">   2</span>
<span class="line">1 x + 2 x + 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多项式的操作" tabindex="-1"><a class="header-anchor" href="#多项式的操作"><span>多项式的操作</span></a></h4><p><strong>获取多项式的系数</strong></p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>coefficients<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>coeffs<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[3 2 1]</span>
<span class="line">[1 2 3]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>两个多项式的四则运算</strong></p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token operator">+</span> p2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token operator">*</span> p2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">   2</span>
<span class="line">4 x + 4 x + 4</span>
<span class="line">   4     3      2</span>
<span class="line">3 x + 8 x + 14 x + 8 x + 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>带入$\\small{x}$求多项式的值</strong></p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">34</span>
<span class="line">18</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多项式求导和不定积分</strong></p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>deriv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>integ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"></span>
<span class="line">6 x + 2</span>
<span class="line">   3     2</span>
<span class="line">1 x + 1 x + 1 x</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求多项式的根</strong></p><p>例如有多项式$\\small{f(x)=x^2+3x+2}$，多项式的根即一元二次方程$\\small{x^2+3x+2=0}$的解。</p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">p3 <span class="token operator">=</span> np<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>roots<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[-2. -1.]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果使用<code>numpy.polynomial</code>模块的<code>Polynomial</code>类来表示多项式对象，那么对应的操作如下所示。</p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>polynomial <span class="token keyword">import</span> Polynomial</span>
<span class="line"></span>
<span class="line">p3 <span class="token operator">=</span> Polynomial<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span>           <span class="token comment"># 输出多项式</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 令x=3，计算多项式的值</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 计算多项式的根</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>degree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获得多项式的次数</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>deriv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 求导</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>integ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 求不定积分</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">2.0 + 3.0·x + 1.0·x²</span>
<span class="line">20.0</span>
<span class="line">[-2. -1.]</span>
<span class="line">2</span>
<span class="line">3.0 + 2.0·x</span>
<span class="line">0.0 + 2.0·x + 1.5·x² + 0.33333333·x³</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="最小二乘解" tabindex="-1"><a class="header-anchor" href="#最小二乘解"><span>最小二乘解</span></a></h4><p><code>Polynomial</code>类还有一个名为<code>fit</code>的类方法，它可以给多项式求最小二乘解。所谓最小二乘解（least-squares solution），是用最小二乘法通过最小化误差的平方和来寻找数据的最佳匹配函数的系数。假设多项式为$\\small{f(x)=ax+b}$，最小二乘解就是让下面的残差平方和$\\small{RSS}$达到最小的$\\small{a}$和$\\small{b}$。 $$ RSS = \\sum_{i=0}^{k}(f(x_i) - y_i)^{2} $$ 例如，我们想利用收集到的月收入和网购支出的历史数据来建立一个预测模型，以达到通过某人的月收入预测他网购支出金额的目标，下面是我们收集到的收入和网购支出的数据，保存在两个数组中。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token number">25000</span><span class="token punctuation">,</span> <span class="token number">15850</span><span class="token punctuation">,</span> <span class="token number">15500</span><span class="token punctuation">,</span> <span class="token number">20500</span><span class="token punctuation">,</span> <span class="token number">22000</span><span class="token punctuation">,</span> <span class="token number">20010</span><span class="token punctuation">,</span> <span class="token number">26050</span><span class="token punctuation">,</span> <span class="token number">12500</span><span class="token punctuation">,</span> <span class="token number">18500</span><span class="token punctuation">,</span> <span class="token number">27300</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">15000</span><span class="token punctuation">,</span>  <span class="token number">8300</span><span class="token punctuation">,</span> <span class="token number">23320</span><span class="token punctuation">,</span>  <span class="token number">5250</span><span class="token punctuation">,</span>  <span class="token number">5800</span><span class="token punctuation">,</span>  <span class="token number">9100</span><span class="token punctuation">,</span>  <span class="token number">4800</span><span class="token punctuation">,</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token number">28500</span><span class="token punctuation">,</span> <span class="token number">32000</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">31300</span><span class="token punctuation">,</span> <span class="token number">10800</span><span class="token punctuation">,</span>  <span class="token number">6750</span><span class="token punctuation">,</span>  <span class="token number">6020</span><span class="token punctuation">,</span> <span class="token number">13300</span><span class="token punctuation">,</span> <span class="token number">30020</span><span class="token punctuation">,</span>  <span class="token number">3200</span><span class="token punctuation">,</span> <span class="token number">17300</span><span class="token punctuation">,</span>  <span class="token number">8835</span><span class="token punctuation">,</span>  <span class="token number">3500</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token number">2599</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">1120</span><span class="token punctuation">,</span> <span class="token number">2560</span><span class="token punctuation">,</span> <span class="token number">1900</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">2320</span><span class="token punctuation">,</span>  <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">1650</span><span class="token punctuation">,</span> <span class="token number">2200</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token number">980</span><span class="token punctuation">,</span>  <span class="token number">580</span><span class="token punctuation">,</span> <span class="token number">1885</span><span class="token punctuation">,</span>  <span class="token number">600</span><span class="token punctuation">,</span>  <span class="token number">400</span><span class="token punctuation">,</span>  <span class="token number">800</span><span class="token punctuation">,</span>  <span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">1380</span><span class="token punctuation">,</span> <span class="token number">1980</span><span class="token punctuation">,</span> <span class="token number">3999</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">3800</span><span class="token punctuation">,</span>  <span class="token number">725</span><span class="token punctuation">,</span>  <span class="token number">520</span><span class="token punctuation">,</span>  <span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">4020</span><span class="token punctuation">,</span>  <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">,</span>  <span class="token number">560</span><span class="token punctuation">,</span>  <span class="token number">500</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以先绘制散点图来了解两组数据是否具有正相关或负相关关系。正相关意味着数组<code>x</code>中较大的值对应到数组<code>y</code>中也是较大的值，而负相关则意味着数组<code>x</code>中较大的值对应到数组<code>y</code>中较小的值。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>dpi<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><p><img src="`+r+`" alt="in_out_scatter_plot.png"></p><p>如果需要定量的研究两组数据的相关性，我们可以计算协方差或相关系数，对应的 NumPy 函数分别是<code>cov</code>和<code>corrcoef</code>。</p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">np<span class="token punctuation">.</span>corrcoef<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">array([[1.        , 0.92275889],</span>
<span class="line">       [0.92275889, 1.        ]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：相关系数是一个<code>-1</code>到<code>1</code>之间的值，越靠近<code>1</code> 说明正相关性越强，越靠近<code>-1</code>说明负相关性越强，靠近<code>0</code>则说明两组数据没有明显的相关性。上面月收入和网购支出之间的相关系数是<code>0.92275889</code>，说明二者是强正相关关系。</p></blockquote><p>通过上面的操作，我们确定了收入和网购支出之前存在强正相关关系，于是我们用这些数据来创建一个回归模型，找出一条能够很好的拟合这些数据点的直线。这里，我们就可以用到上面提到的<code>fit</code>方法，具体的代码如下所示。</p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>polynomial <span class="token keyword">import</span> Polynomial</span>
<span class="line"></span>
<span class="line">Polynomial<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> deg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>coef</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>deg=1</code>说明回归模型最高次项就是1次项，回归模型形如$\\small{y=ax+b}$；如果要生一个类似于$\\small{y=ax^2+bx+c}$的模型，就需要设置<code>deg=2</code>，以此类推。</p></blockquote><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">array([-2.94883437e+02,  1.10333716e-01])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>根据上面输出的结果，我们的回归方程应该是$\\small{y=0.110333716x-294.883437}$。我们将这个回归方程绘制到刚才的散点图上，红色的点是我们的预测值，蓝色的点是历史数据，也就是真实值。</p><p>代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0.110333716</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">294.883437</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0.110333716</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">294.883437</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;darkcyan&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><p><img src="`+u+'" alt="in_out_regression_result.png"></p><p>如果不使用<code>Polynomial</code>类型的<code>fit</code>方法，我们也可以通过 NumPy 提供的<code>polyfit</code>函数来完成同样的操作，有兴趣的读者可以自行研究。</p>',173)]))}const y=s(m,[["render",b],["__file","71.NumPy的应用-4.html.vue"]]),g=JSON.parse('{"path":"/Day66-80/71.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-4.html","title":"例如：$$\\\\begin{bmatrix}1 & 0 & 2 \\\\-1 & 3 & 1 \\\\\\\\end{bmatrix}\\\\times\\\\begin{bmatrix}3 & 1 \\\\2 & 1 \\\\1 & 0\\\\end{bmatrix}","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"NumPy的应用-4","slug":"numpy的应用-4","link":"#numpy的应用-4","children":[{"level":3,"title":"向量","slug":"向量","link":"#向量","children":[]},{"level":3,"title":"行列式","slug":"行列式","link":"#行列式","children":[]},{"level":3,"title":"矩阵","slug":"矩阵","link":"#矩阵","children":[]},{"level":3,"title":"多项式","slug":"多项式","link":"#多项式","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"Day66-80/71.NumPy的应用-4.md"}');export{y as comp,g as data};
