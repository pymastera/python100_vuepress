import{_ as n,c as a,a as e,o as l}from"./app-D-bq_jAa.js";const p="/assets/baidu_stock-6qOjTEpx.png",i="/assets/baidu_stock_ma5-BkLwoock.png",t="/assets/baidu_double_MA-CfBbICjI.png",c="/assets/boston_house_price_features-tO4XoxuI.png",o="/assets/boston_person_correlation-C4bhBJJd.png",d="/assets/boston_spearman_correlation-CLIrAfL9.png",r={};function u(v,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="深入浅出pandas-5" tabindex="-1"><a class="header-anchor" href="#深入浅出pandas-5"><span>深入浅出pandas-5</span></a></h2><p>我们再来补充一些使用<code>DataFrame</code>做数据分析时会使用到的操作，这些操作不仅常见而且也非常重要。</p><h3 id="计算同比环比" tabindex="-1"><a class="header-anchor" href="#计算同比环比"><span>计算同比环比</span></a></h3><p>我们之前讲过一个统计月度销售额的例子，我们可以通过<code>groupby</code>方法做分组聚合，也可以通过<code>pivot_table</code>生成透视表，如下所示。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">sales_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">&#39;data/2020年销售数据.xlsx&#39;</span><span class="token punctuation">)</span></span>
<span class="line">sales_df<span class="token punctuation">[</span><span class="token string">&#39;月份&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> sales_df<span class="token punctuation">.</span>销售日期<span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month</span>
<span class="line">sales_df<span class="token punctuation">[</span><span class="token string">&#39;销售额&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> sales_df<span class="token punctuation">.</span>售价 <span class="token operator">*</span> sales_df<span class="token punctuation">.</span>销售数量</span>
<span class="line">result_df <span class="token operator">=</span> sales_df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">&#39;月份&#39;</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token string">&#39;销售额&#39;</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">&#39;sum&#39;</span><span class="token punctuation">)</span></span>
<span class="line">result_df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;销售额&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;本月销售额&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">result_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">      本月销售额</span>
<span class="line">月份         </span>
<span class="line">1       5409855</span>
<span class="line">2       4608455</span>
<span class="line">3       4164972</span>
<span class="line">4       3996770</span>
<span class="line">5       3239005</span>
<span class="line">6       2817936</span>
<span class="line">7       3501304</span>
<span class="line">8       2948189</span>
<span class="line">9       2632960</span>
<span class="line">10      2375385</span>
<span class="line">11      2385283</span>
<span class="line">12      1691973</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在得到月度销售额之后，如果我们需要计算月环比，这里有两种方案。第一种方案是我们可以使用<code>shift</code>方法对数据进行移动，将上一个月的数据与本月数据对齐，然后通过<code>(本月销售额 - 上月销售额) / 上月销售额</code>来计算月环比，代码如下所示。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">result_df<span class="token punctuation">[</span><span class="token string">&#39;上月销售额&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> result_df<span class="token punctuation">.</span>本月销售额<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">result_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">      本月销售额      上月销售额</span>
<span class="line">月份                    </span>
<span class="line">1       5409855            NaN</span>
<span class="line">2       4608455      5409855.0</span>
<span class="line">3       4164972      4608455.0</span>
<span class="line">4       3996770      4164972.0</span>
<span class="line">5       3239005      3996770.0</span>
<span class="line">6       2817936      3239005.0</span>
<span class="line">7       3501304      2817936.0</span>
<span class="line">8       2948189      3501304.0</span>
<span class="line">9       2632960      2948189.0</span>
<span class="line">10      2375385      2632960.0</span>
<span class="line">11      2385283      2375385.0</span>
<span class="line">12      1691973      2385283.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>shift</code>方法的参数为<code>1</code>表示将数据向下移动一个单元，当然我们可以使用参数<code>-1</code>将数据向上移动一个单元。相信大家能够想到，如果我们有更多年份的数据，我们可以将参数设置为<code>12</code>，这样就可以计算今年的每个月与去年的每个月之间的同比。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">result_df<span class="token punctuation">[</span><span class="token string">&#39;环比&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result_df<span class="token punctuation">.</span>本月销售额 <span class="token operator">-</span> result_df<span class="token punctuation">.</span>上月销售额<span class="token punctuation">)</span> <span class="token operator">/</span> result_df<span class="token punctuation">.</span>上月销售额</span>
<span class="line">result_df<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span></span>
<span class="line">    formatter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;上月销售额&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;{:.0f}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;环比&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;{:.2%}&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    na_rep<span class="token operator">=</span><span class="token string">&#39;--------&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">      本月销售额      上月销售额         环比</span>
<span class="line">月份                    </span>
<span class="line">1       5409855       --------     -------- </span>
<span class="line">2       4608455        5409855      -14.81%     </span>
<span class="line">3       4164972        4608455       -9.62%</span>
<span class="line">4       3996770        4164972       -4.04%</span>
<span class="line">5       3239005        3996770      -18.96%</span>
<span class="line">6       2817936        3239005      -13.00%</span>
<span class="line">7       3501304        2817936       24.25%</span>
<span class="line">8       2948189        3501304      -15.80%</span>
<span class="line">9       2632960        2948189      -10.69%</span>
<span class="line">10      2375385        2632960       -9.78%</span>
<span class="line">11      2385283        2375385        0.42%</span>
<span class="line">12      1691973        2385283      -29.07%</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：使用 JupyterLab 时，可以通过<code>DataFrame</code>对象的<code>style</code>属性在网页中对其进行渲染，上面的代码通过<code>Styler</code>对象的<code>format</code>方法将环比格式化为百分比进行显示，此外还指定了将空值替换为<code>--------</code>。</p></blockquote><p>更为简单的第二种方案是直接使用<code>pct_change</code>方法计算变化的百分比，我们先将之前的上月销售额和环比列删除掉。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">result_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;上月销售额&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;环比&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，我们使用<code>DataFrame</code>对象的<code>pct_change</code>方法完成环比的计算。值得一提的是，<code>pct_change</code>方法有一个名为<code>periods</code>的参数，它的默认值是<code>1</code>，计算相邻两项数据变化的百分比，这不就是我们想要的环比吗？如果我们有很多年的数据，在计算时把这个参数的值修改为<code>12</code>，就可以得到相邻两年的月同比。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">result_df<span class="token punctuation">[</span><span class="token string">&#39;环比&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> result_df<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">result_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="窗口计算" tabindex="-1"><a class="header-anchor" href="#窗口计算"><span>窗口计算</span></a></h3><p><code>DataFrame</code>对象的<code>rolling</code>方法允许我们将数据置于窗口中，然后用函数对窗口中的数据进行运算和处理。例如，我们获取了某只股票近期的数据，想制作5日均线和10日均线，那么就需要先设置窗口再进行运算。我们先用如下所示的代码读取2022年百度的股票数据，数据文件可以通过下面的链接来获取。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">baidu_df = pd.read_excel(&#39;data/2022年股票数据.xlsx&#39;, sheet_name=&#39;BIDU&#39;)</span>
<span class="line">baidu_df.sort_index(inplace=True)</span>
<span class="line">baidu_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><p><img src="`+p+`" alt="baidu_stock.png"></p><p>上面的<code>DataFrame</code>有<code>Open</code>、<code>High</code>、<code>Low</code>、<code>Close</code>、<code>Volume</code>五个列，分别代表股票的开盘价、最高价、最低价、收盘价和成交量，接下来我们对百度的股票数据进行窗口计算。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">baidu_df.rolling(5).mean()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><p><img src="`+i+`" alt="baidu_stock_ma5.png"></p><p>我们也可以在<code>Series</code>上使用<code>rolling</code>设置窗口并在窗口内完成运算，例如我们可以对上面的百度股票收盘价（<code>Close</code>列）计算5日均线和10日均线，并使用<code>merge</code>函数将其组装到一个<code>DataFrame</code>对象中并绘制出双均线图，代码如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">close_ma5 = baidu_df.Close.rolling(5).mean()</span>
<span class="line">close_ma10 = baidu_df.Close.rolling(10).mean()</span>
<span class="line">result_df = pd.merge(close_ma5, close_ma10, left_index=True, right_index=True)</span>
<span class="line">result_df.rename(columns={&#39;Close_x&#39;: &#39;MA5&#39;, &#39;Close_y&#39;: &#39;MA10&#39;}, inplace=True)</span>
<span class="line">result_df.plot(kind=&#39;line&#39;, figsize=(10, 6))</span>
<span class="line">plt.show()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><p><img src="`+t+`" alt="baidu_double_MA.png"></p><h3 id="相关性判定" tabindex="-1"><a class="header-anchor" href="#相关性判定"><span>相关性判定</span></a></h3><p>在统计学中，我们通常使用协方差（covariance）来衡量两个随机变量的联合变化程度。如果变量 $X$ 的较大值主要与另一个变量 $Y$ 的较大值相对应，而两者较小值也相对应，那么两个变量倾向于表现出相似的行为，协方差为正。如果一个变量的较大值主要对应于另一个变量的较小值，则两个变量倾向于表现出相反的行为，协方差为负。简单的说，协方差的正负号显示着两个变量的相关性。方差是协方差的一种特殊情况，即变量与自身的协方差。</p><p>$$ cov(X,Y) = E((X - \\mu)(Y - \\upsilon)) = E(X \\cdot Y) - \\mu\\upsilon $$</p><p>如果 $X$ 和 $Y$ 是统计独立的，那么二者的协方差为0，这是因为在 $X$ 和 $Y$ 独立的情况下：</p><p>$$ E(X \\cdot Y) = E(X) \\cdot E(Y) = \\mu\\upsilon $$</p><p>协方差的数值大小取决于变量的大小，通常是不容易解释的，但是正态形式的协方差可以显示两变量线性关系的强弱。在统计学中，皮尔逊积矩相关系数就是正态形式的协方差，它用于度量两个变量 $X$ 和 $Y$ 之间的相关程度（线性相关），其值介于<code>-1</code>到<code>1</code>之间。</p><p>$$ \\frac {cov(X, Y)} {\\sigma_{X}\\sigma_{Y}} $$</p><p>估算样本的协方差和标准差，可以得到样本皮尔逊系数，通常用希腊字母 $\\rho$ 表示。</p><p>$$ \\rho = \\frac {\\sum_{i=1}^{n}(X_i - \\bar{X})(Y_i - \\bar{Y})} {\\sqrt{\\sum_{i=1}^{n}(X_i - \\bar{X})^2} \\sqrt{\\sum_{i=1}^{n}(Y_i - \\bar{Y})^2}} $$</p><p>我们用 $\\rho$ 值判断指标的相关性时遵循以下两个步骤。</p><ol><li>判断指标间是正相关、负相关，还是不相关。 <ul><li>当 $ \\rho \\gt 0 $，认为变量之间是正相关，也就是两者的趋势一致。</li><li>当 $ \\rho \\lt 0 $，认为变量之间是负相关，也就是两者的趋势相反。</li><li>当 $ \\rho \\approx 0 $，认为变量之间是不相关的，但并不代表两个指标是统计独立的。</li></ul></li><li>判断指标间的相关程度。 <ul><li>当 $ \\rho $ 的绝对值在 $ [0.6,1] $ 之间，认为变量之间是强相关的。</li><li>当 $ \\rho $ 的绝对值在 $ [0.1,0.6) $ 之间，认为变量之间是弱相关的。</li><li>当 $ \\rho $ 的绝对值在 $ [0,0.1) $ 之间，认为变量之间没有相关性。</li></ul></li></ol><p>皮尔逊相关系数适用于：</p><ol><li>两个变量之间是线性关系，都是连续数据。</li><li>两个变量的总体是正态分布，或接近正态的单峰分布。</li><li>两个变量的观测值是成对的，每对观测值之间相互独立。</li></ol><p>这里，我们顺便说一下，如果两组变量并不是来自于正态总体的连续值，我们该如何判断相关性呢？对于定序尺度（等级），我们可以使用斯皮尔曼秩相关系数，其计算公式如下所示： $$ r_{s}=1-{\\frac {6\\sum d_{i}^{2}}{n(n^{2}-1)}} $$ 其中，$d_{i}=\\operatorname {R} (X_{i})-\\operatorname {R} (Y_{i})$，即每组观测中两个变量的等级差值，$n$为观测样本数。</p><p>对于定类尺度（类别），我们可以使用卡方检验的方式来判定其是否相关。其实很多时候，连续值也可以通过分箱的方式处理成离散的等级或类别，然后使用斯皮尔曼秩相关系数或卡方检验的方式来判定相关性。</p><p><code>DataFrame</code>对象的<code>cov</code>方法和<code>corr</code>方法分别用于计算协方差和相关系数，<code>corr</code>方法有一个名为<code>method</code>的参数，其默认值是<code>pearson</code>，表示计算皮尔逊相关系数；除此之外，还可以指定<code>kendall</code>或<code>spearman</code>来计算肯德尔系数或斯皮尔曼秩相关系数。</p><p>我们从名为<code>boston_house_price.csv</code>的文件中获取著名的波士顿房价数据集来创建一个<code>DataFrame</code>。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">boston_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;data/boston_house_price.csv&#39;</span><span class="token punctuation">)</span></span>
<span class="line">boston_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><blockquote><p><strong>说明</strong>：上面代码中使用了相对路径来访问 CSV 文件，也就是说 CSV 文件在当前工作路径下名为<code>data</code>的文件夹中。如果需要上面例子中的 CSV 文件，可以通过下面的百度云盘地址进行获取。链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g?pwd=e7b4" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g?pwd=e7b4</a>，提取码：e7b4。</p></blockquote><p>可以看出，该数据集中包含了诸多影响房价的特征，包括犯罪率、一氧化氮浓度、平均房间数、低收入人群占比等，其中<code>PRICE</code>代表房价，具体情况如下所示。</p><p><img src="`+c+`" alt="boston_house_price_features.png"></p><p>接下来，我们将其中可以视为来自于正态总体的连续值，通过<code>corr</code>方法计算皮尔逊相关系数，看看哪些跟房价是正相关或负相关的关系，代码如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">boston_df[[&#39;NOX&#39;, &#39;RM&#39;, &#39;PTRATIO&#39;, &#39;LSTAT&#39;, &#39;PRICE&#39;]].corr()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><p><img src="`+o+`" alt="boston_person_correlation.png"></p><p>可以看出，平均房间数（<code>RM</code>）跟房价有较强的正相关性，而低收入人群占比（<code>LSTAT</code>）跟房价之间存在明显的负相关性。</p><p>斯皮尔曼秩相关系数对数据条件的要求没有皮尔逊相关系数严格，只要两个变量的观测值是成对的等级数据，或者是由连续变量转化成等级的数据，不论两个变量的总体分布形态、样本容量的大小如何，都可以用斯皮尔曼等级相关系数来进行研究。我们可以通过下面的方式对部分特征进行预处理，然后计算斯皮尔曼秩相关系数。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">boston_df[&#39;CRIM&#39;] = boston_df.CRIM.apply(lambda x: x // 5 if x &lt; 25 else 5).map(int)</span>
<span class="line">boston_df[&#39;ZN&#39;] = pd.qcut(boston_df.ZN, q=[0, 0.75, 0.8, 0.85, 0.9, 0.95, 1], labels=np.arange(6))</span>
<span class="line">boston_df[&#39;AGE&#39;] = (boston_df.AGE // 20).map(int)</span>
<span class="line">boston_df[&#39;DIS&#39;] = (boston_df.DIS // 2.05).map(int)</span>
<span class="line">boston_df[&#39;B&#39;] = (boston_df.B // 66).map(int)</span>
<span class="line">boston_df[&#39;PRICE&#39;] = pd.qcut(boston_df.PRICE, q=[0, 0.15, 0.3, 0.5, 0.7, 0.85, 1], labels=np.arange(6))</span>
<span class="line">boston_df[[&#39;CRIM&#39;, &#39;ZN&#39;, &#39;AGE&#39;, &#39;DIS&#39;, &#39;B&#39;, &#39;PRICE&#39;]].corr(method=&#39;spearman&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><p><img src="`+d+'" alt="boston_spearman_correlation.png"></p><p>可以看出，房价跟犯罪率（<code>CRIM</code>）和房龄（<code>AGE</code>）之间存在较为明显的负相关关系，跟住房用地尺寸（<code>ZN</code>）存在微弱的正相关关系。相关性可以帮助我们在实际工作中找到业务抓手，即找到那些能够影响或改变工作结果的相关因素。</p>',65)]))}const b=n(r,[["render",u],["__file","76.深入浅出pandas-5.html.vue"]]),_=JSON.parse('{"path":"/Day66-80/76.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-5.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"深入浅出pandas-5","slug":"深入浅出pandas-5","link":"#深入浅出pandas-5","children":[{"level":3,"title":"计算同比环比","slug":"计算同比环比","link":"#计算同比环比","children":[]},{"level":3,"title":"窗口计算","slug":"窗口计算","link":"#窗口计算","children":[]},{"level":3,"title":"相关性判定","slug":"相关性判定","link":"#相关性判定","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"Day66-80/76.深入浅出pandas-5.md"}');export{b as comp,_ as data};
