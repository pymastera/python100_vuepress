import{_ as r,c as o,a as s,b as n,d as l,e as i,f as t,r as p,o as d}from"./app-D-bq_jAa.js";const h="/assets/python-idle-B8kT-IWc.png",c="/assets/python-ipython-NF2sY3ZP.png",u="/assets/python-sublime-tHiH5agD.png",m="/assets/python-pycharm-ChGjWz5R.png",v={};function y(b,e){const a=p("RouteLink");return d(),o("div",null,[e[9]||(e[9]=s(`<h2 id="初识python" tabindex="-1"><a class="header-anchor" href="#初识python"><span>初识Python</span></a></h2><blockquote><p><strong>温馨提示</strong>：2018年创建这个仓库的时候，关于Python语言基础这个部分的内容写得相对是比较粗糙，对粗学者可能不是那么友好。如果你正好是一名初学者，建议你移步到我的另一个仓库<a href="https://github.com/jackfrued/Python-for-Freshmen-2023" target="_blank" rel="noopener noreferrer">Python-for-Freshmen-2023</a>，这个仓库对初学者更加友好，对应的内容，大家也可以在我的知乎专栏“从零开始学Python”中找到，点击进入<a href="https://www.zhihu.com/column/c_1216656665569013760" target="_blank" rel="noopener noreferrer">传送门</a>。</p></blockquote><h3 id="python简介" tabindex="-1"><a class="header-anchor" href="#python简介"><span>Python简介</span></a></h3><h4 id="python的历史" tabindex="-1"><a class="header-anchor" href="#python的历史"><span>Python的历史</span></a></h4><ol><li>1989年圣诞节：Guido von Rossum开始写Python语言的编译器。</li><li>1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。</li><li>1994年1月：Python 1.0正式发布。</li><li>2000年10月16日：Python 2.0发布，增加了完整的<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" target="_blank" rel="noopener noreferrer">垃圾回收</a>，提供了对<a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener noreferrer">Unicode</a>的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</li><li>2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6/2.7版本中。</li></ol><p>目前我使用的Python 3.7.x的版本是在2018年发布的，Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为<a href="http://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html" target="_blank" rel="noopener noreferrer">《Python简史》</a>的网络文章。</p><h4 id="python的优缺点" tabindex="-1"><a class="header-anchor" href="#python的优缺点"><span>Python的优缺点</span></a></h4><p>Python的优点很多，简单的可以总结为以下几点。</p><ol><li>简单明了，学习曲线低，比很多编程语言都容易上手。</li><li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li><li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li><li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li><li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li></ol><p>Python的缺点主要集中在以下几点。</p><ol><li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li><li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li><li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li></ol><h4 id="python的应用领域" tabindex="-1"><a class="header-anchor" href="#python的应用领域"><span>Python的应用领域</span></a></h4><p>目前Python在Web应用后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p><h3 id="安装python解释器" tabindex="-1"><a class="header-anchor" href="#安装python解释器"><span>安装Python解释器</span></a></h3><p>想要开始Python编程之旅，首先得在自己使用的计算机上安装Python解释器环境，下面将以安装官方的Python解释器为例，讲解如何在不同的操作系统上安装Python环境。官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython。除此之外，Python解释器还有Java语言实现的Jython、C#语言实现的IronPython以及PyPy、Brython、Pyston等版本，有兴趣的读者可以自行了解。</p><h4 id="windows环境" tabindex="-1"><a class="header-anchor" href="#windows环境"><span>Windows环境</span></a></h4><p>可以在<a href="https://www.python.org" target="_blank" rel="noopener noreferrer">Python官方网站</a>下载到Python的Windows安装程序（exe文件），需要注意的是如果在Windows 7环境下安装Python 3.x，需要先安装Service Pack 1补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl/tk”、“Python test suite”等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示。如果稍后运行Python程序时，出现因为缺失一些动态链接库文件而导致Python解释器无法工作的问题，可以按照下面的方法加以解决。</p><p>如果系统显示api-ms-win-crt*.dll文件缺失，可以参照<a href="https://zhuanlan.zhihu.com/p/32087135" target="_blank" rel="noopener noreferrer">《api-ms-win-crt*.dll缺失原因分析和解决方法》</a>一文讲解的方法进行处理或者直接在<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=48145" target="_blank" rel="noopener noreferrer">微软官网</a>下载Visual C++ Redistributable for Visual Studio 2015文件进行修复；如果是因为更新Windows的DirectX之后导致某些动态链接库文件缺失问题，可以下载一个<a href="https://dl.pconline.com.cn/download/360074-1.html" target="_blank" rel="noopener noreferrer">DirectX修复工具</a>进行修复。</p><h4 id="linux环境" tabindex="-1"><a class="header-anchor" href="#linux环境"><span>Linux环境</span></a></h4><p>Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在<a href="https://www.python.org" target="_blank" rel="noopener noreferrer">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）。</p><ol><li>安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</li></ol><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>下载Python源代码并解压缩到指定目录。</li></ol><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</span>
<span class="line">xz -d Python-3.7.6.tar.xz</span>
<span class="line">tar -xvf Python-3.7.6.tar</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>切换至Python源代码目录并执行下面的命令进行配置和安装。</li></ol><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">cd Python-3.7.6</span>
<span class="line">./configure --prefix=/usr/local/python37 --enable-optimizations</span>
<span class="line">make &amp;&amp; make install</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。</li></ol><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">cd ~</span>
<span class="line">vim .bash_profile</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line"># ... 此处省略上面的代码 ...</span>
<span class="line"></span>
<span class="line">export PATH=$PATH:/usr/local/python37/bin</span>
<span class="line"></span>
<span class="line"># ... 此处省略下面的代码 ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>激活环境变量。</li></ol><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">source .bash_profile</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="macos环境" tabindex="-1"><a class="header-anchor" href="#macos环境"><span>macOS环境</span></a></h4><p>macOS也自带了Python 2.x版本，可以通过<a href="https://www.python.org" target="_blank" rel="noopener noreferrer">Python的官方网站</a>提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行<code>python</code>命令来启动2.x版本的Python解释器，启动3.x版本的Python解释器需要执行<code>python3</code>命令。</p><h3 id="运行python程序" tabindex="-1"><a class="header-anchor" href="#运行python程序"><span>运行Python程序</span></a></h3><h4 id="确认python的版本" tabindex="-1"><a class="header-anchor" href="#确认python的版本"><span>确认Python的版本</span></a></h4><p>可以Windows的命令行提示符中键入下面的命令。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">python --version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在Linux或macOS系统的终端中键入下面的命令。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">python3 --version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当然也可以先输入<code>python</code>或<code>python3</code>进入交互式环境，再执行以下的代码检查Python的版本。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import sys</span>
<span class="line"></span>
<span class="line">print(sys.version_info)</span>
<span class="line">print(sys.version)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编写python源代码" tabindex="-1"><a class="header-anchor" href="#编写python源代码"><span>编写Python源代码</span></a></h4><p>可以用文本编辑工具（推荐使用<a href="https://www.sublimetext.com/" target="_blank" rel="noopener noreferrer">Sublime</a>、<a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">Visual Studio Code</a>等高级文本编辑工具）编写Python源代码并用py作为后缀名保存该文件，代码内容如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">print(&#39;hello, world!&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="运行程序" tabindex="-1"><a class="header-anchor" href="#运行程序"><span>运行程序</span></a></h4><p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了&quot;hello, world!&quot;。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">python hello.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">python3 hello.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="代码中的注释" tabindex="-1"><a class="header-anchor" href="#代码中的注释"><span>代码中的注释</span></a></h4><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><ol><li>单行注释 - 以#和空格开头的部分</li><li>多行注释 - 三个引号开头，三个引号结尾</li></ol><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">&quot;&quot;&quot;</span>
<span class="line">第一个Python程序 - hello, world!</span>
<span class="line">向伟大的Dennis M. Ritchie先生致敬</span>
<span class="line"></span>
<span class="line">Version: 0.1</span>
<span class="line">Author: 骆昊</span>
<span class="line">&quot;&quot;&quot;</span>
<span class="line">print(&#39;hello, world!&#39;)</span>
<span class="line"># print(&quot;你好, 世界！&quot;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python开发工具" tabindex="-1"><a class="header-anchor" href="#python开发工具"><span>Python开发工具</span></a></h3><h4 id="idle-自带的集成开发工具" tabindex="-1"><a class="header-anchor" href="#idle-自带的集成开发工具"><span>IDLE - 自带的集成开发工具</span></a></h4><p>IDLE是安装Python环境时自带的集成开发工具，如下图所示。但是由于IDLE的用户体验并不是那么好所以很少在实际开发中被采用。</p><p><img src="`+h+`" alt=""></p><h4 id="ipython-更好的交互式编程工具" tabindex="-1"><a class="header-anchor" href="#ipython-更好的交互式编程工具"><span>IPython - 更好的交互式编程工具</span></a></h4><p>IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython，具体的操作如下所示。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">pip install ipython</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">pip3 install ipython</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装成功后，可以通过下面的ipython命令启动IPython，如下图所示。</p><p><img src="`+c+'" alt=""></p><h4 id="sublime-text-高级文本编辑器" tabindex="-1"><a class="header-anchor" href="#sublime-text-高级文本编辑器"><span>Sublime Text - 高级文本编辑器</span></a></h4><p><img src="'+u+`" alt=""></p><ul><li><p>首先可以通过<a href="https://www.sublimetext.com/" target="_blank" rel="noopener noreferrer">官方网站</a>下载安装程序安装Sublime Text 3或Sublime Text 2。</p></li><li><p>安装包管理工具。</p><ol><li>通过快捷键Ctrl+\`或者在View菜单中选择Show Console打开控制台，输入下面的代码。</li></ol><ul><li>Sublime 3</li></ul><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import  urllib.request,os;pf=&#39;Package Control.sublime-package&#39;;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),&#39;wb&#39;).write(urllib.request.urlopen(&#39;http://sublime.wbond.net/&#39;+pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Sublime 2</li></ul><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import  urllib2,os;pf=&#39;Package Control.sublime-package&#39;;ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));open(os.path.join(ipp,pf),&#39;wb&#39;).write(urllib2.urlopen(&#39;http://sublime.wbond.net/&#39;+pf.replace(&#39; &#39;,&#39;%20&#39;)).read());print(&#39;Please restart Sublime Text to finish installation&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>在浏览器中输入 https://sublime.wbond.net/Package%20Control.sublime-package 下载包管理工具的安装包，并找到安装Sublime目录下名为&quot;Installed Packages&quot;的目录，把刚才下载的文件放到这个文件加下，然后重启Sublime Text就搞定了。</li></ol></li><li><p>安装插件。通过Preference菜单的Package Control或快捷键Ctrl+Shift+P打开命令面板，在面板中输入Install Package就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件：</p><ul><li>SublimeCodeIntel - 代码自动补全工具插件。</li><li>Emmet - 前端开发代码模板插件。</li><li>Git - 版本控制工具插件。</li><li>Python PEP8 Autoformat - PEP8规范自动格式化插件。</li><li>ConvertToUTF8 - 将本地编码转换为UTF-8。</li></ul></li></ul><blockquote><p><strong>说明</strong>：事实上<a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">Visual Studio Code</a>可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。</p></blockquote><h4 id="pycharm-python开发神器" tabindex="-1"><a class="header-anchor" href="#pycharm-python开发神器"><span>PyCharm - Python开发神器</span></a></h4>`,69)),n("p",null,[e[1]||(e[1]=l("PyCharm的安装、配置和使用在")),i(a,{to:"/%E7%95%AA%E5%A4%96%E7%AF%87/%E7%8E%A9%E8%BD%ACPyCharm.html"},{default:t(()=>e[0]||(e[0]=[l("《玩转PyCharm》")])),_:1}),e[2]||(e[2]=l("进行了介绍，有兴趣的读者可以选择阅读。"))]),e[10]||(e[10]=n("p",null,[n("img",{src:m,alt:""})],-1)),e[11]||(e[11]=n("h3",{id:"练习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习"},[n("span",null,"练习")])],-1)),n("ol",null,[n("li",null,[e[7]||(e[7]=s(`<p>在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import this</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),n("blockquote",null,[n("p",null,[e[4]||(e[4]=n("strong",null,"说明",-1)),e[5]||(e[5]=l("：输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的")),i(a,{to:"/Python%E4%B9%8B%E7%A6%85.html"},{default:t(()=>e[3]||(e[3]=[l("“Python之禅”")])),_:1}),e[6]||(e[6]=l("，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。"))])])]),e[8]||(e[8]=s(`<li><p>学习使用turtle在屏幕上绘制图形。</p><blockquote><p><strong>说明</strong>：turtle是Python内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是Logo语言的一部分，Logo语言是Wally Feurzig和Seymour Papert在1966发明的编程语言。</p></blockquote><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import turtle</span>
<span class="line"></span>
<span class="line">turtle.pensize(4)</span>
<span class="line">turtle.pencolor(&#39;red&#39;)</span>
<span class="line"></span>
<span class="line">turtle.forward(100)</span>
<span class="line">turtle.right(90)</span>
<span class="line">turtle.forward(100)</span>
<span class="line">turtle.right(90)</span>
<span class="line">turtle.forward(100)</span>
<span class="line">turtle.right(90)</span>
<span class="line">turtle.forward(100)</span>
<span class="line"></span>
<span class="line">turtle.mainloop()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。</p></blockquote></li>`,1))])])}const P=r(v,[["render",y],["__file","01.初识Python.html.vue"]]),f=JSON.parse('{"path":"/Day01-15/01.%E5%88%9D%E8%AF%86Python.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"初识Python","slug":"初识python","link":"#初识python","children":[{"level":3,"title":"Python简介","slug":"python简介","link":"#python简介","children":[]},{"level":3,"title":"安装Python解释器","slug":"安装python解释器","link":"#安装python解释器","children":[]},{"level":3,"title":"运行Python程序","slug":"运行python程序","link":"#运行python程序","children":[]},{"level":3,"title":"Python开发工具","slug":"python开发工具","link":"#python开发工具","children":[]},{"level":3,"title":"练习","slug":"练习","link":"#练习","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"Day01-15/01.初识Python.md"}');export{P as comp,f as data};
