import{_ as n,c as s,a,o as i}from"./app-D-bq_jAa.js";const l={};function t(d,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h2 id="python容器类型使用小技巧" tabindex="-1"><a class="header-anchor" href="#python容器类型使用小技巧"><span>Python容器类型使用小技巧</span></a></h2><p>Python中提供了非常丰富的容器型数据类型，大家最为熟悉的有<code>list</code>、<code>tuple</code>、<code>set</code>、<code>dict</code>等。下面为大家分享一些使用这些类型的小技巧，希望帮助大家写出更加Pythonic的代码。</p><h3 id="从字典中取最大" tabindex="-1"><a class="header-anchor" href="#从字典中取最大"><span>从字典中取最大</span></a></h3><p>假设字典对象对应的变量名为<code>my_dict</code>。</p><ul><li><p>取出最大值</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">max(my_dict.values())</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>取值最大值的键</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">max(my_dict, key=my_dict.get)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>取出最大值的键和值</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"> <span class="token builtin">max</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import operator</span>
<span class="line"></span>
<span class="line">max(my_dict.items(), key=operator.itemgetter(1))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面用到了<code>operator</code>模块的<code>itemgetter</code>函数，这个函数的的作用如下所示。在上面的代码中，<code>itemgetter</code>帮我们获取到了二元组中的第2个元素。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">def itemgetter(*items):</span>
<span class="line">    if len(items) == 1:</span>
<span class="line">        item = items[0]</span>
<span class="line">        def g(obj):</span>
<span class="line">            return obj[item]</span>
<span class="line">    else:</span>
<span class="line">        def g(obj):</span>
<span class="line">            return tuple(obj[item] for item in items)</span>
<span class="line">    return g</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h3 id="统计列表元素出现次数" tabindex="-1"><a class="header-anchor" href="#统计列表元素出现次数"><span>统计列表元素出现次数</span></a></h3><p>假设列表对象对应的变量名为<code>my_list</code>。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">{x: my_list.count(x) for x in set(my_list)}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">from itertools import groupby</span>
<span class="line"></span>
<span class="line">{key: len(list(group)) for key, group in groupby(sorted(my_list))}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>groupby</code>函数会将相邻相同元素分到一个组中，所以先用<code>sorted</code>函数排序就是为了将相同的元素放到一起。</p></blockquote><p>或</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">from collections import Counter</span>
<span class="line"></span>
<span class="line">dict(Counter(my_list))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="截断列表元素" tabindex="-1"><a class="header-anchor" href="#截断列表元素"><span>截断列表元素</span></a></h3><p>假设列表对象对应的变量名为<code>my_list</code>，通常大家会想到用下面的方式来截断列表。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">my_list = my_list[:i]</span>
<span class="line">my_list = my_list[j:]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，更好的方式使用下面的操作，大家可以认真想想为什么。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">del my_list[i:]</span>
<span class="line">del my_list[:j]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按最长列表实现zip操作" tabindex="-1"><a class="header-anchor" href="#按最长列表实现zip操作"><span>按最长列表实现zip操作</span></a></h3><p>Python的内置函数<code>zip</code>可以产生一个生成器对象，该生成器对象将两个或多个可迭代对象的元素组装到一起，如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">list(zip(&#39;abc&#39;, [1, 2, 3, 4]))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行上面的代码会得到一个如下所示的列表，相信大家也注意到了，列表中元素的个数是由<code>zip</code>函数中长度最小的可迭代对象决定的，所以下面的列表中只有3个元素。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">[(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果希望由<code>zip</code>函数中长度最大的可迭代对象来决定最终迭代出的元素个数，可以试一试<code>itertools</code>模块的<code>zip_longest</code>函数，其用法如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">from itertools import zip_longest</span>
<span class="line"></span>
<span class="line">list(zip_longest(&#39;abc&#39;, [1, 2, 3, 4]))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码创建出的列表对象如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">[(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3), (None, 4)]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="快速拷贝一个列表" tabindex="-1"><a class="header-anchor" href="#快速拷贝一个列表"><span>快速拷贝一个列表</span></a></h3><p>如果希望快速拷贝一个列表对象，可以通过切片操作来实现，但是切片操作仅实现了浅拷贝，简单的说就是切片创建了新的列表对象，但是新列表中的元素是和之前的列表共享的。如果希望实现深拷贝，可以使用<code>copy</code>模块的<code>deepcopy</code>函数。</p><ul><li><p>浅拷贝</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">thy_list = my_list[:]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import copy</span>
<span class="line"></span>
<span class="line">thy_list = copy.copy(my_list)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>深拷贝</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">import copy</span>
<span class="line"></span>
<span class="line">thy_list = copy.deepcopy(my_list)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="对两个或多个列表对应元素进行操作" tabindex="-1"><a class="header-anchor" href="#对两个或多个列表对应元素进行操作"><span>对两个或多个列表对应元素进行操作</span></a></h3><p>Python内置函数中的<code>map</code>函数可以对一个可迭代对象中的元素进行“映射”操作，这个函数在批量处理数据时非常有用。但是很多人都不知道，这个函数还可以作用于多个可迭代对象，通过传入的函数对多个可迭代对象中的对应元素进行处理，如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">my_list = [11, 13, 15, 17]</span>
<span class="line">thy_list = [2, 4, 6, 8, 10]</span>
<span class="line">list(map(lambda x, y: x + y, my_list, thy_list))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的操作会得到如下所示的列表。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">[13, 17, 21, 25]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当然，同样的操作也可以用<code>zip</code>函数配合列表生成式来完成。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">my_list = [11, 13, 15, 17]</span>
<span class="line">thy_list = [2, 4, 6, 8, 10]</span>
<span class="line">[x + y for x, y in zip(my_list, thy_list)]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理列表中的空值和零值" tabindex="-1"><a class="header-anchor" href="#处理列表中的空值和零值"><span>处理列表中的空值和零值</span></a></h3><p>假设列表对象对应的变量名为<code>my_list</code>，如果列表中有空值（<code>None</code>）和零值，我们可以用下面的方式去掉空值和零值。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">list(filter(bool, my_list))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对应的列表生成式语法如下所示。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">[x for x in my_list if x]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="从嵌套列表中抽取指定列" tabindex="-1"><a class="header-anchor" href="#从嵌套列表中抽取指定列"><span>从嵌套列表中抽取指定列</span></a></h3><p>假设<code>my_list</code>是一个如下所示的嵌套列表，该嵌套列表可以用来表示数学上的矩阵，如果要取出矩阵第一列的元素构成一个列表，我们可以这样写。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">my_list = [</span>
<span class="line">    [1, 1, 2, 2],</span>
<span class="line">    [5, 6, 7, 8],</span>
<span class="line">    [3, 3, 4, 4],</span>
<span class="line">]</span>
<span class="line">col1, *_ = zip(*my_list)</span>
<span class="line">list(col1)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们会得到一个如下所示的列表，刚好是矩阵的第一列。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">[1, 5, 3]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以此类推，如果想取出矩阵第二列的元素构成一个列表，可以用如下所示的方法。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">_, col2, *_ = zip(*my_list)</span>
<span class="line">list(col2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，如果要实现矩阵的转置操作，我们也可以按照上面的思路写出下面的代码。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">[list(x) for x in zip(*my_list)]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>经过上面的操作，我们会得到如下所示的列表。</p><div class="language-Python line-numbers-mode" data-highlighter="prismjs" data-ext="Python" data-title="Python"><pre><code><span class="line">[[1, 5, 3], </span>
<span class="line"> [1, 6, 3], </span>
<span class="line"> [2, 7, 4], </span>
<span class="line"> [2, 8, 4]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>不知道上面的内容有没有触及到大家的知识盲区，如果有的话欢迎在评论区留言讨论。</p>`,55)]))}const p=n(l,[["render",t],["__file","Python容器使用小技巧.html.vue"]]),c=JSON.parse('{"path":"/%E7%95%AA%E5%A4%96%E7%AF%87/Python%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Python容器类型使用小技巧","slug":"python容器类型使用小技巧","link":"#python容器类型使用小技巧","children":[{"level":3,"title":"从字典中取最大","slug":"从字典中取最大","link":"#从字典中取最大","children":[]},{"level":3,"title":"统计列表元素出现次数","slug":"统计列表元素出现次数","link":"#统计列表元素出现次数","children":[]},{"level":3,"title":"截断列表元素","slug":"截断列表元素","link":"#截断列表元素","children":[]},{"level":3,"title":"按最长列表实现zip操作","slug":"按最长列表实现zip操作","link":"#按最长列表实现zip操作","children":[]},{"level":3,"title":"快速拷贝一个列表","slug":"快速拷贝一个列表","link":"#快速拷贝一个列表","children":[]},{"level":3,"title":"对两个或多个列表对应元素进行操作","slug":"对两个或多个列表对应元素进行操作","link":"#对两个或多个列表对应元素进行操作","children":[]},{"level":3,"title":"处理列表中的空值和零值","slug":"处理列表中的空值和零值","link":"#处理列表中的空值和零值","children":[]},{"level":3,"title":"从嵌套列表中抽取指定列","slug":"从嵌套列表中抽取指定列","link":"#从嵌套列表中抽取指定列","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"番外篇/Python容器使用小技巧.md"}');export{p as comp,c as data};
