import{_ as s,c as a,a as n,o as i}from"./app-D-bq_jAa.js";const t="/assets/sql_to_mr-B8v-LfvH.png",d="/assets/HADOOP-ECOSYSTEM-Edureka-BUHx4j24.png",l="/assets/what_hive_can_do-BwZW1OQe.png",r="/assets/what_hive_can_not_do-CiBo2Nc8.png",c="/assets/hive_vs_rdbms-BFfihEE7.png",p="/assets/20220210080638-DkNatLWi.png",o="/assets/20220210080655-CENsm58G.png",u="/assets/hive_data_types-DbLKJrcU.png",m={};function v(h,e){return i(),a("div",null,e[0]||(e[0]=[n('<h2 id="hive简介" tabindex="-1"><a class="header-anchor" href="#hive简介"><span>Hive简介</span></a></h2><p><a href="https://hive.apache.org/" target="_blank" rel="noopener noreferrer">Hive</a> 是 Facebook 开源的一款基于 Hadoop 的数据仓库工具，目前由 Apache 软件基金会维护，它是应用最广泛的大数据处理解决方案，它能将 SQL 查询转变为 MapReduce（Google提出的一个软件架构，用于大规模数据集的并行运算）任务，对 SQL 提供了完美的支持，能够非常方便的实现大数据统计。</p><p><img src="'+t+'" alt="sql_to_mr.png"></p><p><img src="'+d+'" alt="HADOOP-ECOSYSTEM-Edureka.png"></p><blockquote><p><strong>说明</strong>：可以通过<a href="https://www.edureka.co/blog/hadoop-ecosystem" target="_blank" rel="noopener noreferrer">https://www.edureka.co/blog/hadoop-ecosystem</a>来了解 Hadoop 生态圈。</p></blockquote><p>如果要简单的介绍 Hive，那么以下两点是其核心：</p><ol><li>把 HDFS 中结构化的数据映射成表。</li><li>通过把 HQL 进行解析和转换，最终生成一系列基于 Hadoop 的 MapReduce 任务或 Spark 任务，通过执行这些任务完成对数据的处理。也就是说，即便不学习 Java、Scala 这样的编程语言，一样可以实现对数据的处理。</li></ol><p>Hive的应用场景。</p><p><img src="'+l+'" alt="what_hive_can_do.png"></p><p><img src="'+r+'" alt="what_hive_can_not_do.png"></p><p>Hive和传统关系型数据库的对比如下图和下表所示。</p><p><img src="'+c+'" alt="hive_vs_rdbms.png"></p><table><thead><tr><th></th><th>Hive</th><th>RDBMS</th></tr></thead><tbody><tr><td>查询语言</td><td>HQL</td><td>SQL</td></tr><tr><td>存储数据</td><td>HDFS</td><td>本地文件系统</td></tr><tr><td>执行方式</td><td>MapReduce / Spark</td><td>Executor</td></tr><tr><td>执行延迟</td><td>高</td><td>低</td></tr><tr><td>数据规模</td><td>大</td><td>小</td></tr></tbody></table><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h3><ol><li><p>搭建如下图所示的大数据平台。</p><p><img src="'+p+'" alt="20220210080638.png"></p></li><li><p>通过Client节点（跳板机）访问大数据平台。</p><p><img src="'+o+`" alt="20220210080655.png"></p></li><li><p>创建文件Hadoop的文件系统。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">hdfs dfs -mkdir /user/root</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>将准备好的数据文件拷贝到Hadoop文件系统中。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">hdfs dfs -put /home/ubuntu/data/* /user/root</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>进入 hive 命令行。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">hive</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="建库建表" tabindex="-1"><a class="header-anchor" href="#建库建表"><span>建库建表</span></a></h3><ol><li><p>创建。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">create database eshop;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">drop database eshop cascade;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>切换。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">use eshop;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h4 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h4><p>Hive的数据类型如下所示。</p><p><img src="`+u+`" alt="hive_data_types.png"></p><p>基本数据类型：</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>支持版本</th></tr></thead><tbody><tr><td>tinyint</td><td>1-Byte</td><td></td></tr><tr><td>smallint</td><td>2-Byte</td><td></td></tr><tr><td>int</td><td>4-Byte</td><td></td></tr><tr><td>bigint</td><td>8-Byte</td><td></td></tr><tr><td>boolean</td><td></td><td></td></tr><tr><td>float</td><td>4-Byte</td><td></td></tr><tr><td>double</td><td>8-Byte</td><td></td></tr><tr><td>string</td><td></td><td></td></tr><tr><td>binary</td><td></td><td>0.8版本</td></tr><tr><td>timestamp</td><td></td><td>0.8版本</td></tr><tr><td>decimal</td><td></td><td>0.11版本</td></tr><tr><td>char</td><td></td><td>0.13版本</td></tr><tr><td>varchar</td><td></td><td>0.12版本</td></tr><tr><td>date</td><td></td><td>0.12版本</td></tr></tbody></table><p>复合数据类型：</p><table><thead><tr><th>数据类型</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>struct</td><td>和C语言中的结构体类似</td><td><code>struct&lt;first_name:string, last_name:string&gt;</code></td></tr><tr><td>map</td><td>由键值对构成的元素的集合</td><td><code>map&lt;string,int&gt;</code></td></tr><tr><td>array</td><td>具有相同类型的变量的容器</td><td><code>array&lt;string&gt;</code></td></tr></tbody></table><ol start="4"><li><p>创建内部表。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">create table if not exists dim_user_info </span>
<span class="line">(</span>
<span class="line">user_id string,</span>
<span class="line">user_name string, </span>
<span class="line">sex string,</span>
<span class="line">age int,</span>
<span class="line">city string,</span>
<span class="line">firstactivetime string,</span>
<span class="line">level int,</span>
<span class="line">extra1 string,</span>
<span class="line">extra2 map&lt;string,string&gt;</span>
<span class="line">)</span>
<span class="line">row format delimited fields terminated by &#39;\\t&#39;</span>
<span class="line">collection items terminated by &#39;,&#39;</span>
<span class="line">map keys terminated by &#39;:&#39;</span>
<span class="line">lines terminated by &#39;\\n&#39;</span>
<span class="line">stored as textfile;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>加载数据。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">load data local inpath &#39;/home/ubuntu/data/user_info/user_info.txt&#39; overwrite into table dim_user_info;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">load data inpath &#39;/user/root/user_info.txt&#39; overwrite into table dim_user_info;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>创建分区表。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">create table if not exists fact_user_trade </span>
<span class="line">(</span>
<span class="line">user_name string,</span>
<span class="line">piece int,</span>
<span class="line">price double,</span>
<span class="line">pay_amount double,</span>
<span class="line">goods_category string,</span>
<span class="line">pay_time bigint</span>
<span class="line">)  </span>
<span class="line">partitioned by (dt string)</span>
<span class="line">row format delimited fields terminated by &#39;\\t&#39;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提供分区数据。</p><div class="language-Shell line-numbers-mode" data-highlighter="prismjs" data-ext="Shell" data-title="Shell"><pre><code><span class="line">hdfs dfs -put /home/ubuntu/data/user_trade/* /user/hive/warehouse/eshop.db/fact_user_trade</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>设置动态分区。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">set hive.exec.dynamic.partition=true;</span>
<span class="line">set hive.exec.dynamic.partition.mode=nonstrict;</span>
<span class="line">set hive.exec.max.dynamic.partitions=10000;</span>
<span class="line">set hive.exec.max.dynamic.partitions.pernode=10000;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修复分区。</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">msck repair table fact_user_trade;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h4><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">-- 查询北京女用户的姓名取前10个</span>
<span class="line">select user_name from dim_user_info where city=&#39;beijing&#39; and sex=&#39;female&#39; limit 10;</span>
<span class="line"></span>
<span class="line">-- 查询2019年3月24日购买了food类商品的用户名、购买数量和支付金额（不聚合）</span>
<span class="line">select user_name, piece, pay_amount from fact_user_trade where dt=&#39;2019-03-24&#39; and goods_category=&#39;food&#39;;</span>
<span class="line"></span>
<span class="line">-- 统计用户 ELLA 在2018年的总支付金额和最近最远两次消费间隔天数</span>
<span class="line">select sum(pay_amount) as total, datediff(max(from_unixtime(pay_time, &#39;yyyy-MM-dd&#39;)), min(from_unixtime(pay_time, &#39;yyyy-MM-dd&#39;))) from fact_user_trade where year(dt)=&#39;2018&#39; and user_name=&#39;ELLA&#39;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by"><span>group by</span></a></h4><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">-- 查询2019年1月到4月，每个品类有多少人购买，累计金额是多少</span>
<span class="line">select goods_category, count(distinct user_name) as total_user, sum(pay_amount) as total_pay from fact_user_trade where dt between &#39;2019-01-01&#39; and &#39;2019-04-30&#39; group by goods_category;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">-- 查询2019年4月支付金额超过5万元的用户</span>
<span class="line">select user_name, sum(pay_amount) as total from fact_user_trade where dt between &#39;2019-04-01&#39; and &#39;2019-04-30&#39; group by user_name having sum(pay_amount) &gt; 50000;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-hive line-numbers-mode" data-highlighter="prismjs" data-ext="hive" data-title="hive"><pre><code><span class="line">-- 查询2018年购买的商品品类在两个以上的用户数</span>
<span class="line">select count(tmp.user_name) from (select user_name, count(distinct goods_category) as total from fact_user_trade where year(dt)=&#39;2018&#39; group by user_name having count(distinct goods_category)&gt;2) tmp;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by"><span>order by</span></a></h4><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">-- 查询2019年4月支付金额最多的用户前5名</span>
<span class="line">select user_name, sum(pay_amount) as total from fact_user_trade where dt between &#39;2019-04-01&#39; and &#39;2019-04-30&#39; group by user_name order by total desc limit 5;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数"><span>常用函数</span></a></h4><ol><li><p><code>from_unixtime</code>：将时间戳转换成日期</p><div class="language-hive line-numbers-mode" data-highlighter="prismjs" data-ext="hive" data-title="hive"><pre><code><span class="line">select from_unixtime(pay_time, &#39;yyyy-MM-dd hh:mm:ss&#39;) from fact_user_trade limit 10;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>unix_timestamp</code>：将日期转换成时间戳</p></li><li><p><code>datediff</code>：计算两个日期的时间差</p><div class="language-Hive line-numbers-mode" data-highlighter="prismjs" data-ext="Hive" data-title="Hive"><pre><code><span class="line">-- 用户首次激活时间与设定参照时间的间隔</span>
<span class="line">select user_name, datediff(&#39;2019-4-1&#39;, to_date(firstactivetime)) from dim_user_info limit 10;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>if</code>：根据条件返回不同的值</p><div class="language-Hive line-numbers-mode" data-highlighter="prismjs" data-ext="Hive" data-title="Hive"><pre><code><span class="line">-- 统计不同年龄段的用户数</span>
<span class="line">select case when age &lt; 20 then &#39;20岁以下&#39; when age &lt; 30 then &#39;30岁以下&#39; when age &lt; 40 then &#39;40岁以下&#39; else &#39;40岁以上&#39; end as age_seg, count(distinct user_id) as total from dim_user_info group by case when age &lt; 20 then &#39;20岁以下&#39; when age &lt; 30 then &#39;30岁以下&#39; when age &lt; 40 then &#39;40岁以下&#39; else &#39;40岁以上&#39; end;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-Hive line-numbers-mode" data-highlighter="prismjs" data-ext="Hive" data-title="Hive"><pre><code><span class="line">-- 不同性别高级等用户数量</span>
<span class="line">select sex, if(level &gt; 5, &#39;高&#39;, &#39;低&#39;) as level_type, count(distinct user_id) as total from dim_user_info group by sex, if(level &gt; 5, &#39;高&#39;, &#39;低&#39;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>substr</code>：字符串取子串</p><div class="language-Hive line-numbers-mode" data-highlighter="prismjs" data-ext="Hive" data-title="Hive"><pre><code><span class="line">-- 统计每个月激活的新用户数</span>
<span class="line">select substr(firstactivetime, 1, 7) as month, count(distinct user_id) as total from dim_user_info group by substr(firstactivetime, 1, 7);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>get_json_object</code>：从JSON字符串中取出指定的<code>key</code>对应的<code>value</code>，如：<code>get_json_object(info, &#39;$.first_name&#39;)</code>。</p><div class="language-Hive line-numbers-mode" data-highlighter="prismjs" data-ext="Hive" data-title="Hive"><pre><code><span class="line">-- 统计不同手机品牌的用户数</span>
<span class="line">select get_json_object(extra1, &#39;$.phonebrand&#39;) as phone, count(distinct user_id) as total from user_info group by get_json_object(extra1, &#39;$.phonebrand&#39;);</span>
<span class="line"></span>
<span class="line">select extra2[&#39;phonebrand&#39;] as phone, count(distinct user_id) as total from user_info group by extra2[&#39;phonebrand&#39;];</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>说明：MySQL对应的函数名字叫<code>json_extract</code>。</p></blockquote></li></ol>`,36)]))}const g=s(m,[["render",v],["__file","45.大数据平台和HiveSQL.html.vue"]]),_=JSON.parse('{"path":"/Day36-45/45.%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E5%92%8CHiveSQL.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Hive简介","slug":"hive简介","link":"#hive简介","children":[{"level":3,"title":"准备工作","slug":"准备工作","link":"#准备工作","children":[]},{"level":3,"title":"建库建表","slug":"建库建表","link":"#建库建表","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"Day36-45/45.大数据平台和HiveSQL.md"}');export{g as comp,_ as data};
